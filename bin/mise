#!/usr/bin/env ruby
$:.unshift File.join(File.dirname(__FILE__),'..','lib')

require 'optparse'
require 'etc'
require 'pathname'
require 'logger'
require 'tmpdir'
require 'escoffier'

def parse_options
  options = Hash.new
  parser = OptionParser.new do |opts|
    opts.banner = "Usage: #{File.basename(__FILE__)} [options] source_paths destination"

    # opts.on('-o', '--output OUTPUT_DIRECTORY', "Output Destination Directory")     do |dir| 
    #   options[:output] = dir
    #   abort "Cannot find directory #{dir}." unless File.directory?(File.dirname(dir))
    # end
    
    opts.on('-t', '--temp', "Make a temporary directory for output")     do |dir| 
      options[:mktmpdir] = true
      abort "Output directory already specified - not creating a temporary directory." if options[:dir] 
    end
    
    # opts.on('-f', '--[no-]force', "Force Overwrite of the sandbox") do |f|
    #   options[:force] = f
    # end
    
    opts.on('-v', '--[no-]verbose', "Get detailed output") do |v|
      options[:verbose] = v
    end

    opts.on_tail('-h', '--help',          "Show this message")          { puts(parser); exit }
	opts.on_tail("Example Usage - Use like cp or mv: #{__FILE__} /Data/vtrak1/raw/gallagher.pd/mri/pd005b/009 /tmp")
  end

  parser.parse!(ARGV)
  puts parser unless ARGV.size >= 2
  return options
end

def prep_mise(directories, options)
  if options[:mktmpdir]
    begin 
      destination = Dir.mktmpdir      
    rescue
      begin 
        destination = Dir.tmpdir
      rescue
        destination = '/tmp/'
      end
    end
  else
    destination = directories.pop
  end
  
  directories.each do |directory|   
    directory.prep_mise_to(destination)
  end
      
end

if File.basename(__FILE__) == File.basename($PROGRAM_NAME)
  $LOG = Logger.new(STDOUT)
  $LOG.level = Logger::INFO
  
  options = parse_options
  directories = ARGV.collect { |dir| Pathname.new(dir) }
  prep_mise(directories, options)
end
